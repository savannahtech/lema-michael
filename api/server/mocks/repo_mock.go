// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dilly3/houdini/internal/storage (interfaces: IRepoStore)
//
// Generated by this command:
//
//	mockgen -destination=api/server/mocks/repo_mock.go -package=mocks github.com/dilly3/houdini/internal/storage IRepoStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/dilly3/houdini/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepoStore is a mock of IRepoStore interface.
type MockIRepoStore struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoStoreMockRecorder
}

// MockIRepoStoreMockRecorder is the mock recorder for MockIRepoStore.
type MockIRepoStoreMockRecorder struct {
	mock *MockIRepoStore
}

// NewMockIRepoStore creates a new mock instance.
func NewMockIRepoStore(ctrl *gomock.Controller) *MockIRepoStore {
	mock := &MockIRepoStore{ctrl: ctrl}
	mock.recorder = &MockIRepoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepoStore) EXPECT() *MockIRepoStoreMockRecorder {
	return m.recorder
}

// GetRepoByID mocks base method.
func (m *MockIRepoStore) GetRepoByID(arg0 context.Context, arg1 string) (*model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByID", arg0, arg1)
	ret0, _ := ret[0].(*model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByID indicates an expected call of GetRepoByID.
func (mr *MockIRepoStoreMockRecorder) GetRepoByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByID", reflect.TypeOf((*MockIRepoStore)(nil).GetRepoByID), arg0, arg1)
}

// GetRepoByName mocks base method.
func (m *MockIRepoStore) GetRepoByName(arg0 context.Context, arg1 string) (*model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByName", arg0, arg1)
	ret0, _ := ret[0].(*model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByName indicates an expected call of GetRepoByName.
func (mr *MockIRepoStoreMockRecorder) GetRepoByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByName", reflect.TypeOf((*MockIRepoStore)(nil).GetRepoByName), arg0, arg1)
}

// GetReposByLanguage mocks base method.
func (m *MockIRepoStore) GetReposByLanguage(arg0 context.Context, arg1 string, arg2 int) ([]model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposByLanguage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposByLanguage indicates an expected call of GetReposByLanguage.
func (mr *MockIRepoStoreMockRecorder) GetReposByLanguage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposByLanguage", reflect.TypeOf((*MockIRepoStore)(nil).GetReposByLanguage), arg0, arg1, arg2)
}

// GetReposByStarCount mocks base method.
func (m *MockIRepoStore) GetReposByStarCount(arg0 context.Context, arg1 int) ([]model.RepoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposByStarCount", arg0, arg1)
	ret0, _ := ret[0].([]model.RepoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposByStarCount indicates an expected call of GetReposByStarCount.
func (mr *MockIRepoStoreMockRecorder) GetReposByStarCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposByStarCount", reflect.TypeOf((*MockIRepoStore)(nil).GetReposByStarCount), arg0, arg1)
}

// SaveRepo mocks base method.
func (m *MockIRepoStore) SaveRepo(arg0 context.Context, arg1 *model.RepoInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRepo indicates an expected call of SaveRepo.
func (mr *MockIRepoStoreMockRecorder) SaveRepo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepo", reflect.TypeOf((*MockIRepoStore)(nil).SaveRepo), arg0, arg1)
}
